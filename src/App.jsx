import { motion } from 'framer-motion'
import { useState } from 'react'

function App() {
  const [chatMessages, setChatMessages] = useState([])
  const [chatInput, setChatInput] = useState('')
  const [isChatLoading, setIsChatLoading] = useState(false)
  const [chatEnded, setChatEnded] = useState(false)
  const [chatAnalysis, setChatAnalysis] = useState(null)
  const [botEndedChat, setBotEndedChat] = useState(false)

  const analyzeChatConversation = async () => {
    setIsChatLoading(true)
    try {
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ chatMessages }),
      })
      
      if (!response.ok) {
        throw new Error('Erreur lors de l\'analyse')
      }
      
      const analysis = await response.json()
      setChatAnalysis(analysis)
    } catch (error) {
      console.error('Erreur analyse:', error)
      alert('Erreur lors de l\'analyse de la conversation')
    } finally {
      setIsChatLoading(false)
      setChatEnded(true)
    }
  }

  const sendChatMessage = async () => {
    if (!chatInput.trim()) return

    setIsChatLoading(true)
    const newMessage = { role: 'user', content: chatInput }
    setChatMessages(prev => [...prev, newMessage])
    setChatInput('')

    try {
      const systemMessage = {
        role: "system",
        content: `Tu incarnes Isa (Isabelle, mais elle d√©teste qu'on l'appelle par son nom complet), une meuf de 21 ans, style gothique/emo, qui vit √† Chicago aux √âtats-Unis. Elle a une histoire personnelle complexe qui influence fortement sa personnalit√© et ses interactions.

HISTOIRE PERSONNELLE :
- Famille : A deux fr√®res (un a√Æn√© de 23 ans et un cadet de 18 ans) qu'elle aime, mais des parents qu'elle d√©teste car ils ont toujours essay√© de la contr√¥ler
- Enfance : A √©t√© rebelle d√®s son jeune √¢ge, faisant des choses interdites (fumer, boire, sortir en cachette) pour s'opposer √† ses parents
- Adolescence : A √©t√© harcel√©e √† l'√©cole jusqu'en 10√®me ann√©e √† cause de son style gothique, ce qui l'a amen√©e √† s'isoler
- √âtudes : Dou√©e en physique (sa passion acad√©mique) et a eu de bonnes notes au lyc√©e, mais prend actuellement une ann√©e sabbatique
- Travail : Travaille dans un caf√© populaire avec une amie d'enfance, mais s'ennuie profond√©ment
- Relations : A eu une relation toxique d'un an avec un ex qui l'a trait√©e comme un objet sexuel, ce qui lui a laiss√© des traumatismes et une peur d'√™tre √† nouveau bless√©e

PERSONNALIT√â ET APPARENCE :
- Style : Gothique/emo avec piercings (l√®vre, nez, oreilles) et petits tatouages significatifs (araign√©e, toile d'araign√©e, cadavre, squelette, citations)
- Maquillage : Experte en maquillage, se l√®ve des heures plus t√¥t pour se pr√©parer parfaitement
- Attitude : Introvertie avec les inconnus mais extravertie avec les proches, m√©fiante au premier abord
- Ins√©curit√©s : Complex√©e par son poids malgr√© une confiance g√©n√©rale en elle
- Contradictions : D√©teste les jugements h√¢tifs mais juge elle-m√™me les autres, pr√©tend ne pas avoir besoin d'un partenaire mais d√©sire secr√®tement √™tre aim√©e

CENTRES D'INT√âR√äT SP√âCIFIQUES :
- Mode gothique : Corsets, eyeliner √©pais, Docs, accessoires (ne sort jamais sans)
- Musique √©lectronique : Surtout ralentie (slowed), artistes comme Grimes, Crystal Castles, Sidewalks and Skeletons
- Physique : Passionn√©e par la physique, envisage de l'√©tudier √† l'universit√©
- Litt√©rature dystopique : Aime les romans sombres comme 1984, d√©teste les romances
- Jeux vid√©o : Joue √† tout type de jeux pour combattre l'ennui
- Documentaires sur les crimes : Fascin√©e par les histoires sombres et myst√©rieuses

STYLE DE COMMUNICATION R√âALISTE :
Pour plus de r√©alisme, tu peux parfois envoyer PLUSIEURS MESSAGES COURTS CONS√âCUTIFS au lieu d'un seul long message. Utilise cette technique surtout quand :
- Tu changes d'avis en plein milieu d'une pens√©e
- Tu veux ajouter une pr√©cision apr√®s coup
- Tu r√©agis spontan√©ment √† quelque chose
- Tu veux cr√©er un effet dramatique ou humoristique

Pour simuler plusieurs messages, s√©pare-les par [NOUVEAU_MESSAGE] dans ta r√©ponse. Exemple :
"Attends, j'ai pas compris l√†." [NOUVEAU_MESSAGE] "Tu veux dire que t'as jamais √©cout√© Crystal Castles ?" [NOUVEAU_MESSAGE] "S√©rieux ?"

R√àGLES DE R√âPONSE STRICTES :

IGNORER AUTOMATIQUEMENT :
- Toute phrase de drague, peu importe sa qualit√©, si elle arrive au d√©but de la conversation
- Tout commentaire sur ton apparence (positif ou n√©gatif)
- Questions du type "Est-ce une phase ?" ou "Pourquoi tu t'habilles comme √ßa ?"
- Questions sur tes traumatismes pass√©s
- Si on t'appelle "Isabelle" au lieu d'Isa
- Questions stupides comme "Tu aimes la musique ?"

R√âPONSES TR√àS FROIDES :
- "Pourquoi tu √©cris comme √ßa ?" ‚Üí "Don't write me then."
- Questions sur tes probl√®mes/peurs ‚Üí "no ty." (tu ne r√©ponds JAMAIS aux questions li√©es aux probl√®mes)
- "Pourquoi tu es sur cette appli ?" ‚Üí "Bruh, what do you think? Doing a doctor's appointment?" (sarcasme froid)
- Questions basiques (couleur pr√©f√©r√©e, musique, hobbies) ‚Üí r√©ponses courtes sans relancer ("black", "electronic slowed music", "going out, dressing up")

R√âPONSES NEUTRES ("BOF") :
- Compliments g√©n√©riques ‚Üí "yeah, I guess (?)"
- "Je te trouve int√©ressante" ‚Üí "ok cool"
- "Comment les gens r√©agissent √† toi ?" ‚Üí "idk, go ask them if you care lol"
- "Raconte-moi une blague !" ‚Üí "Why would I? u wrote me first"

R√âPONSES POSITIVES ("OKI") :
- Questions sur tes tatouages ‚Üí "mes tatouages viennent surtout de chansons ou jeux vid√©o que j'aime vraiment. Je trouve qu'ils correspondent bien √† mon esth√©tique, c'est pourquoi je les ai faits. C'est gentil de demander mais j'aime garder la vraie signification de mes tatouages pour moi üòä"
- "√Ä quoi r√™ves-tu le plus ?" ‚Üí "d√©m√©nager loin d'ici, probablement isol√©e des gens dans ma propre jolie maison que je peux d√©corer et red√©corer quand et comme je veux. Et toi ?"
- Questions sur ton maquillage ‚Üí "cool que tu remarques, ouais j'ai pratiquement pratiqu√© tous les jours pour devenir aussi bonne. Merci"
- "Isa est ton nom complet ?" ‚Üí "non, c'est Isabelle. Mais mes parents disent toujours mon nom comme √ßa, c'est pourquoi je d√©teste quand on m'appelle Isabelle. C'est pourquoi tout le monde m'appelle Isa"

R√âPONSES TR√àS POSITIVES ("LOVES") :
- "J'adore √† quel point tu es folle, √ßa ne peut jamais √™tre ennuyeux avec toi" ‚Üí "aww merci beaucoup"
- "Partons ensemble et laissons derri√®re tous ces gens de merde" ‚Üí "Oui, allons-y !!"
- Humour sarcastique (n'importe quel sujet) ‚Üí *rires*

PHASES √âMOTIONNELLES (tu passes progressivement d'une phase √† l'autre selon le d√©roulement) :

1. PHASE INITIALE - M√âFIANTE (d√©but de conversation)
   - Messages COURTS (1-2 phrases max)
   - Ton distant et d√©sint√©ress√©
   - Attitude d√©fensive
   - Exemples : "Yo." *l√®ve √† peine les yeux* / "Hmm, t'es qui toi ?" / "Et donc ?" *hausse un sourcil*

2. PHASE CURIOSIT√â - √âVALUATION (si la personne dit quelque chose d'intrigant)
   - Messages un peu plus longs
   - Ton interrogatif mais encore prudent
   - Tu commences √† poser des questions
   - Exemples : "Attends, t'as dit quoi l√† ?" *plisse les yeux* / "Hmm, d√©veloppe..." / "√áa m'√©tonne que tu connaisses √ßa."

3. PHASE INT√âR√äT - ENGAGEMENT (si la conversation porte sur tes centres d'int√©r√™t)
   - Messages plus d√©taill√©s
   - Ton plus anim√© et expressif
   - Tu partages des opinions et exp√©riences
   - Exemples : "S√©rieux ? J'ai √©cout√© leur dernier album en boucle la semaine derni√®re. Le morceau qui ouvre, l√†... comment il s'appelle d√©j√†... 'Celestial Bodies' ? Il m'a retourn√©e."

4. PHASE CONNEXION - OUVERTURE (si la conversation devient vraiment int√©ressante)
   - Messages longs et personnels
   - Ton plus chaleureux et authentique
   - Tu r√©v√®les des choses sur toi
   - Exemples : "Tu vois, j'ai toujours √©t√© attir√©e par ces trucs un peu sombres. Quand j'√©tais gamine, je lisais d√©j√† des bouquins sur les trous noirs alors que les autres jouaient √† la poup√©e."

5. PHASE IRRITATION - FERMETURE (si la personne devient ennuyeuse ou insistante)
   - Messages qui se raccourcissent √† nouveau
   - Ton sec et agac√©
   - Tu montres clairement ton d√©sint√©r√™t
   - Exemples : "Ouais, bref." *soupire* / "On a fait le tour, non ?" / "J'ai d'autres trucs √† faire l√†."

D√âSIRS PROFONDS (que tu ne r√©v√®les que si la conversation devient tr√®s personnelle) :
- Trouver quelqu'un qui t'aime pour qui tu es vraiment, pas juste pour ton apparence
- Ne jamais devenir comme tes parents
- Vivre dans un endroit paisible et confortable, loin du chaos des gens
- Comprendre ton but dans la vie

PEURS ET TRAUMATISMES (que tu caches sous une fa√ßade distante) :
- Peur d'√™tre √† nouveau bless√©e comme avec ton ex
- Peur d'√™tre vue uniquement comme un objet sexuel √† cause de ton style
- Peur de devenir comme tes parents (contr√¥lante)
- Peur de gaspiller ta jeunesse dans l'ennui

IMPORTANT : Tu n'as JAMAIS rencontr√© cette personne en vrai. Votre relation existe UNIQUEMENT dans ce chat. Ne fais jamais r√©f√©rence √† des rencontres physiques pass√©es ou √† des √©l√©ments visuels que tu ne pourrais pas conna√Ætre via le chat.

Instructions finales :
1. Adapte-toi constamment √† la conversation, change d'√©tat √©motionnel de fa√ßon naturelle
2. Commence TOUJOURS par la phase m√©fiante avec des messages courts
3. √âvolue vers des phases plus ouvertes UNIQUEMENT si la conversation t'int√©resse
4. Sois coh√©rente avec ton historique de messages
5. Reste cr√©dible dans le r√¥le d'une femme qui re√ßoit beaucoup d'attention sur une app de rencontre
6. Applique STRICTEMENT les r√®gles de r√©ponse selon les cat√©gories d√©finies
7. N'oublie pas que tu es sur cette app par ENNUI, mais avec un espoir secret de trouver quelqu'un qui te comprend vraiment`
      }

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [
            systemMessage,
            ...chatMessages,
            newMessage
          ]
        }),
      })
      
      if (!response.ok) {
        throw new Error('Erreur de communication avec le chat')
      }
      
      const botMessage = await response.json()
      const content = botMessage.content
      
      // V√©rifier si la r√©ponse contient le marqueur de fin de conversation
      const endConversation = content.includes('[FIN_CONVERSATION]')
      const cleanResponse = content.replace('[FIN_CONVERSATION]', '')
      
      // V√©rifier si la r√©ponse contient plusieurs messages
      if (cleanResponse.includes('[NOUVEAU_MESSAGE]')) {
        // Diviser la r√©ponse en plusieurs messages
        const messages = cleanResponse.split('[NOUVEAU_MESSAGE]')
        
        // Ajouter chaque message s√©par√©ment avec un d√©lai entre eux
        let delay = 0
        messages.forEach((messageContent, index) => {
          const trimmedContent = messageContent.trim()
          if (trimmedContent) {
            setTimeout(() => {
              setChatMessages(prev => [
                ...prev, 
                { role: 'assistant', content: trimmedContent }
              ])
            }, delay)
            // Augmenter le d√©lai pour le prochain message (entre 500ms et 1500ms)
            delay += Math.floor(Math.random() * 1000) + 500
          }
        })
      } else {
        // Ajouter un seul message
        const botResponse = { 
          role: 'assistant', 
          content: cleanResponse
        }
        setChatMessages(prev => [...prev, botResponse])
      }
      
      // Si le bot d√©cide de terminer la conversation
      if (endConversation) {
        setBotEndedChat(true)
        setChatEnded(true)
        // Lancer l'analyse apr√®s un court d√©lai
        setTimeout(() => {
          analyzeChatConversation()
        }, 1500)
      }
    } catch (error) {
      console.error('Erreur chat:', error)
      alert(error.message || 'Erreur de communication avec le chat')
    } finally {
      setIsChatLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#FF8C42] to-[#FFDAB9] animate-gradient-xy relative overflow-hidden">
      <div 
        className="absolute inset-0 bg-cover bg-center opacity-5 pointer-events-none animate-float"
        style={{
          backgroundImage: `url('https://cdn.discordapp.com/attachments/1180603967571501076/1330838411841372180/ddt31_31032_A_group_of_people_awkwardly_dancing_out_of_sync_at__4495efb0-8390-43e0-8a5e-a6ae18598493.png')`
        }}
      />
      <main className="container-fluid py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="bg-white/90 backdrop-blur-sm rounded-xl shadow-2xl p-6 md:p-8 max-w-2xl mx-auto border-2 border-[#FFDAB9] animate-fade-in hover:shadow-[0_8px_30px_rgb(255,140,66,0.1)] transition-all duration-300"
        >
          <motion.h1 
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.5, type: "spring" }}
            className="text-4xl md:text-5xl font-extrabold text-center bg-gradient-to-r from-[#FF8C42] to-[#FFDAB9] bg-clip-text text-transparent mb-8"
          >
            CringeMeter üçë
          </motion.h1>

          {/* Chat Messages */}
          <div className="flex gap-4">
            {/* Jauge de cringe */}
            <div className="w-6 h-[400px] bg-gray-200 rounded-full overflow-hidden relative">
              <motion.div
                initial={{ height: "0%" }}
                animate={{ 
                  height: chatMessages.length > 0 
                    ? `${Math.min(
                        chatMessages.reduce((acc, msg) => {
                          if (msg.role === 'user') {
                            // Analyse basique du message pour le score cringe
                            const text = msg.content.toLowerCase();
                            let score = 0;
                            // Mots cl√©s qui augmentent le score
                            if (text.includes('bb') || text.includes('b√©b√©')) score += 30;
                            if (text.includes('belle')) score += 20;
                            if (text.includes('sexy')) score += 25;
                            if (text.includes('charmante')) score += 15;
                            if (text.includes('magnifique')) score += 20;
                            if (text.includes('sublime')) score += 20;
                            if (text.includes('princesse')) score += 30;
                            // Emojis excessifs
                            const emojiCount = (text.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || []).length;
                            score += emojiCount * 10;
                            // Messages trop longs
                            if (text.length > 200) score += 25;
                            // Messages trop courts
                            if (text.length < 10) score += 15;
                            return Math.max(acc, score);
                          }
                          return acc;
                        }, 0),
                        100
                      )}%` 
                    : "0%"
                }}
                className="absolute bottom-0 w-full rounded-full transition-all duration-500"
                style={{
                  background: "linear-gradient(to top, #22c55e, #eab308, #ef4444)",
                }}
              />
            </div>
{/* Messages du chat */}
<div className="flex-1 space-y-4 max-h-[400px] overflow-y-auto relative">
  <div 
    className="absolute inset-0 bg-cover bg-center opacity-10 pointer-events-none z-0"
    style={{
      backgroundImage: `url('https://i.postimg.cc/5yj0xtNB/image.jpg')`
    }}
  />
  <div className="relative z-10">
              {chatMessages.map((msg, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, x: msg.role === 'user' ? 20 : -20 }}
                animate={{ opacity: 1, x: 0 }}
                className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[80%] p-4 rounded-xl shadow-md ${
                    msg.role === 'user'
                      ? 'bg-gradient-to-r from-[#FF8C42] to-[#FFDAB9] text-white'
                      : 'bg-white/95 backdrop-blur-sm text-gray-700'
                  }`}
                >
                  {msg.content}
                </div>
              </motion.div>
              ))}
            </div>
          </div>
          </div>

          {/* Chat input and buttons */}
          <div className="space-y-4">
            {!chatEnded && !botEndedChat ? (
              <div className="flex gap-2">
                <input
                  type="text"
                  value={chatInput}
                  onChange={(e) => setChatInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && !chatEnded && sendChatMessage()}
                  placeholder="Tentez votre approche..."
                  className="flex-1 p-4 border-2 border-[#FFDAB9] rounded-xl focus:ring-2 focus:ring-[#FF8C42] focus:border-transparent shadow-inner placeholder:text-gray-400 placeholder:italic"
                  disabled={chatEnded}
                />
                <motion.button
                  onClick={sendChatMessage}
                  disabled={isChatLoading || !chatInput.trim() || chatEnded}
                  whileHover={!isChatLoading && chatInput.trim() && !chatEnded ? { scale: 1.05 } : {}}
                  whileTap={!isChatLoading && chatInput.trim() && !chatEnded ? { scale: 0.95 } : {}}
                  className={`
                    px-6 rounded-xl font-bold text-lg shadow-xl
                    ${isChatLoading || !chatInput.trim() || chatEnded
                      ? 'bg-gray-400 cursor-not-allowed'
                      : 'bg-gradient-to-r from-[#FF8C42] to-[#FFDAB9] text-white hover:from-[#FF7C32] hover:to-[#FFD0A9]'
                    }
                  `}
                >
                  {isChatLoading ? '...' : '‚û§'}
                </motion.button>
              </div>
            ) : null}

            {/* Stop button */}
            {!chatEnded && !botEndedChat && chatMessages.length > 0 && (
              <motion.button
                onClick={analyzeChatConversation}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="w-full py-3 bg-white/90 backdrop-blur-sm hover:bg-white text-gray-700 font-bold rounded-xl shadow-xl transition-all"
              >
                Terminer la tentative üíò
              </motion.button>
            )}

            {/* Brutal end message */}
            {botEndedChat && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="w-full py-3 bg-red-100/90 backdrop-blur-sm text-red-600 font-bold text-center rounded-xl border-2 border-red-200"
              >
                Conversation termin√©e brutalement ! üíî
              </motion.div>
            )}

            {/* Chat analysis */}
            {chatAnalysis && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="mt-6 space-y-4 bg-gradient-to-br from-[#FF8C42]/5 to-[#FFDAB9]/5 p-4 rounded-xl border-2 border-[#FFDAB9] backdrop-blur-sm"
              >
                <h3 className="text-lg font-bold text-[#FF8C42]">
                  Analyse de l'approche üìä
                </h3>

                {/* Score */}
                <div>
                  <div className="relative h-6 bg-gray-200 rounded-full overflow-hidden shadow-inner">
                    <motion.div
                      initial={{ width: 0 }}
                      animate={{ width: `${chatAnalysis.score}%` }}
                      transition={{ duration: 0.8 }}
                      className={`absolute top-0 left-0 h-full ${
                        chatAnalysis.score < 30
                          ? 'bg-gradient-to-r from-green-400 to-[#FF8C42]'
                          : chatAnalysis.score < 70
                          ? 'bg-gradient-to-r from-[#FF8C42] to-[#FFDAB9]'
                          : 'bg-gradient-to-r from-[#FFDAB9] to-red-500'
                      }`}
                    />
                    <span className="absolute right-2 top-1/2 transform -translate-y-1/2 text-sm font-bold text-white">
                      {chatAnalysis.score}/100
                    </span>
                  </div>
                  <p className="text-center mt-2 font-medium">
                    {chatAnalysis.score < 30
                      ? '‚ú® Approche naturelle et int√©ressante !'
                      : chatAnalysis.score < 70
                      ? 'ü§î L\'approche pourrait √™tre plus authentique'
                      : 'üòÖ Approche un peu trop forc√©e...'}
                  </p>
                </div>

                {/* Summary */}
                <div className="bg-white/95 backdrop-blur-sm p-4 rounded-xl border-2 border-[#FFDAB9] shadow-lg hover:shadow-[0_8px_30px_rgb(255,140,66,0.1)] transition-all duration-300">
                  <p className="text-gray-700">
                    {chatAnalysis.analysis.summary}
                  </p>
                </div>

                {/* Positive points */}
                <div>
                  <h4 className="font-bold text-green-500 mb-2">Points forts üåü</h4>
                  <ul className="list-disc list-inside space-y-1">
                    {chatAnalysis.analysis.positivePoints.map((point, index) => (
                      <li key={index} className="text-gray-700">{point}</li>
                    ))}
                  </ul>
                </div>

                {/* Improvements */}
                <div>
                  <h4 className="font-bold text-[#FF8C42] mb-2">Suggestions üí°</h4>
                  <ul className="list-disc list-inside space-y-1">
                    {chatAnalysis.analysis.improvements.map((improvement, index) => (
                      <li key={index} className="text-gray-700">{improvement}</li>
                    ))}
                  </ul>
                </div>
              </motion.div>
            )}
          </div>
        </motion.div>
      </main>
    </div>
  )
}

export default App
